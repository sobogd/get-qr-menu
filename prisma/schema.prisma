generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id            String     @id @default(uuid()) @db.Uuid
  slug          String?    @unique @db.VarChar(160)
  name          String     @db.VarChar(200)
  defaultLocale String     @default("en") @db.VarChar(10)
  description   String?
  createdAt     DateTime   @default(now()) @db.Timestamp(6)
  updatedAt     DateTime   @updatedAt @db.Timestamp(6)
  categories    Category[]
  items         Dish[]
  userRestaurants UserRestaurant[]
}

model Category {
  id           String     @id @default(uuid()) @db.Uuid
  name         String     @db.VarChar(160)
  slug         String?    @db.VarChar(160)
  sortIndex    Int        @default(0)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String     @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  updatedAt    DateTime   @updatedAt @db.Timestamp(6)
  items        Dish[]
}


model Dish {
  id          String           @id @default(cuid())
  basePrice   Decimal          @db.Decimal(10,2)
  photoUrl    String?
  isAvailable Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  translations DishTranslation[]
  optionGroups DishOptionGroup[]
  tags         DishTag[]
  allergens    DishAllergen[]

  restaurant   Restaurant      @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String          @db.Uuid
  category     Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId   String?         @db.Uuid
}

model DishTranslation {
  id          String @id @default(cuid())
  dishId      String
  lang        String // "en" | "es" | "ru"
  name        String
  description String?

  dish Dish @relation(fields: [dishId], references: [id], onDelete: Cascade)
  @@unique([dishId, lang])
}

model OptionGroup {
  id        String                  @id @default(cuid())
  kind      String                  // "variant" | "extra"
  selection String                  // "single" | "multi"
  required  Boolean                 @default(false)
  minSelect Int?
  maxSelect Int?

  options      Option[]
  translations OptionGroupTranslation[]
  dishes       DishOptionGroup[]
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}

model OptionGroupTranslation {
  id            String @id @default(cuid())
  optionGroupId String
  lang          String
  name          String

  group OptionGroup @relation(fields: [optionGroupId], references: [id], onDelete: Cascade)
  @@unique([optionGroupId, lang])
}

model Option {
  id           String           @id @default(cuid())
  groupId      String
  priceDelta   Decimal          @db.Decimal(10,2) @default(0)
  isDefault    Boolean          @default(false)
  isAvailable  Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  group        OptionGroup      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  translations OptionTranslation[]
}

model OptionTranslation {
  id       String @id @default(cuid())
  optionId String
  lang     String
  name     String

  option Option @relation(fields: [optionId], references: [id], onDelete: Cascade)
  @@unique([optionId, lang])
}

model DishOptionGroup {
  id       String   @id @default(cuid())
  dishId   String
  groupId  String
  position Int

  dish  Dish        @relation(fields: [dishId], references: [id], onDelete: Cascade)
  group OptionGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  @@unique([dishId, groupId])
}

model Tag {
  id        String   @id @default(cuid())
  slug      String   @unique
  label     String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dishes DishTag[]
}

model DishTag {
  id     String @id @default(cuid())
  dishId String
  tagId  String

  dish Dish @relation(fields: [dishId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  @@unique([dishId, tagId])
}

enum AllergenCode {
  gluten
  lactose
  nuts
  soy
  egg
  fish
  shellfish
  sesame
  mustard
  celery
  lupin
  sulphites
}

model DishAllergen {
  id     String       @id @default(cuid())
  dishId String
  code   AllergenCode

  dish Dish @relation(fields: [dishId], references: [id], onDelete: Cascade)
  @@unique([dishId, code])
}

model VerificationToken {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @db.VarChar(320)
  token     String   @db.VarChar(32)
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  expiresAt DateTime @db.Timestamp(6)

  @@index([email])
}

model User {
  id           String     @id @default(uuid()) @db.Uuid
  email        String     @unique @db.VarChar(320)
  restaurants  UserRestaurant[]
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  updatedAt    DateTime   @updatedAt @db.Timestamp(6)

  @@index([email])
}

model UserRestaurant {
  userId       String   @db.Uuid
  restaurantId String   @db.Uuid

  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@id([userId, restaurantId])
}
